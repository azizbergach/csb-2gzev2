{"version":3,"sources":["components/ToggleColumns.js","components/ProductList.js","components/FilterForm.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["ToggleColumns","props","onCheckboxClick","e","target","name","checked","className","Object","keys","columns","map","column","index","htmlFor","id","type","onChange","ProductList","products","length","product","department","price","currency","FilterForm","onPriceInputChange","value","Number","placeholder","priceFrom","priceTo","Search","useState","Infinity","setPrice","setColumns","displayedProducts","setDisplayedProducts","filterProducts","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAEaA,EAAgB,SAACC,GAC5B,IAAMC,EAAkB,SAACC,GACvBF,EAAMC,gBAAgBC,EAAEC,OAAOC,KAAMF,EAAEC,OAAOE,UAGhD,OACE,qBAAKC,UAAU,iBAAf,SACGC,OAAOC,KAAKR,EAAMS,SAASC,KAAI,SAACC,EAAQC,GACvC,OACE,gCACE,uBAAOC,QAASF,EAAhB,SAAyBA,IACzB,uBACEG,GAAIH,EACJP,KAAMO,EACNI,KAAK,WACLC,SAAUf,EACVI,QAASL,EAAMS,QAAQE,OAPjBC,SCTPK,EAAc,SAACjB,GAI1B,OACE,sBAAKc,GAAG,eAAR,UACE,iCACE,oDAAuBd,EAAMkB,SAASC,OAAtC,eAEF,kCACE,gCACE,+BACE,oCACA,sCACA,4CACA,4CAGJ,gCACGnB,EAAMkB,SAASR,KAAI,SAACU,EAASR,GAAV,OAClB,+BACE,6BAAKZ,EAAMS,QAAQK,IAAMM,EAAQN,KACjC,6BAAKd,EAAMS,QAAQL,MAAQgB,EAAQhB,OACnC,6BAAKJ,EAAMS,QAAQY,YAAcD,EAAQC,aACzC,6BAAKrB,EAAMS,QAAQa,OAASF,EAAQE,QACpC,6BAAKtB,EAAMS,QAAQc,UAAYH,EAAQG,aALhCX,eCpBRY,EAAa,SAACxB,GACzB,IAAMyB,EAAqB,SAACvB,GAC1B,IAAME,EAAOF,EAAEC,OAAOC,KAChBsB,EAAQxB,EAAEC,OAAOuB,MACvB1B,EAAMyB,mBAAmBrB,EAAMuB,OAAOD,KAGxC,OACE,gCACE,uBAAOb,QAAQ,YAAf,yBACA,uBACEE,KAAK,SACLD,GAAG,YACHV,KAAK,YACLwB,YAAY,gBACZZ,SAAUS,EACVC,MAAO1B,EAAM6B,YAEf,uBAAOhB,QAAQ,UAAf,uBACA,uBACEE,KAAK,SACLD,GAAG,UACHV,KAAK,UACLwB,YAAY,cACZZ,SAAUS,EACVC,MAAO1B,EAAM8B,c,OCnBRC,EAAS,SAAC/B,GACrB,MAA0BgC,mBAAS,CAAEH,UAAW,EAAGC,QAASG,MAA5D,mBAAOX,EAAP,KAAcY,EAAd,KAEA,EAA8BF,mBAAS,CACrClB,IAAI,EACJV,MAAM,EACNiB,YAAY,EACZC,OAAO,EACPC,UAAU,IALZ,mBAAOd,EAAP,KAAgB0B,EAAhB,KAQA,EAAkDH,mBAAShC,EAAMkB,UAAjE,mBAAOkB,EAAP,KAA0BC,EAA1B,KAUMC,EAAiB,WACrBD,EACErC,EAAMkB,SAASqB,QACb,SAACnB,GAAD,OACEA,EAAQE,OAASA,EAAMO,WAAaT,EAAQE,OAASA,EAAMQ,aAKnE,OACE,sBAAKxB,UAAU,WAAf,UACE,cAAC,EAAD,CACEuB,UAAWP,EAAMO,UACjBC,QAASR,EAAMQ,QACfL,mBAtBqB,SAACrB,EAAMsB,GAChCQ,GAAS,SAACZ,GAAD,mBAAC,eAAgBA,GAAjB,kBAAyBlB,EAAOsB,MAAUY,QAwBjD,cAAC,EAAD,CAAerC,gBArBK,SAACG,EAAMC,GAC7B8B,GAAW,SAAC1B,GAAD,mBAAC,eAAkBA,GAAnB,kBAA6BL,EAAOC,QAoBII,QAASA,IAE1D,cAAC,EAAD,CAAaS,SAAUkB,EAAmB3B,QAASA,QCvC1C+B,EAJH,WACV,OAAO,cAAC,EAAD,CAAQtB,SAAUA,KCMPuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8f5b0c4c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const ToggleColumns = (props) => {\n  const onCheckboxClick = (e) => {\n    props.onCheckboxClick(e.target.name, e.target.checked);\n  };\n\n  return (\n    <div className=\"toggle-columns\">\n      {Object.keys(props.columns).map((column, index) => {\n        return (\n          <div key={index}>\n            <label htmlFor={column}>{column}</label>\n            <input\n              id={column}\n              name={column}\n              type=\"checkbox\"\n              onChange={onCheckboxClick}\n              checked={props.columns[column]}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const ProductList = (props) => {\n  // TODO: display appropriate header\n  // TODO: display only chosen columns\n  // TODO: display products as new table rows\n  return (\n    <div id=\"product-list\">\n      <header>\n        <strong>Product List ({props.products.length} items)</strong>\n      </header>\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Department</th>\n            <th>Price</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.products.map((product, index) => (\n            <tr key={index}>\n              <td>{props.columns.id && product.id}</td>\n              <td>{props.columns.name && product.name}</td>\n              <td>{props.columns.department && product.department}</td>\n              <td>{props.columns.price && product.price}</td>\n              <td>{props.columns.currency && product.currency}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const FilterForm = (props) => {\n  const onPriceInputChange = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    props.onPriceInputChange(name, Number(value));\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"priceFrom\">Price From:</label>\n      <input\n        type=\"number\"\n        id=\"priceFrom\"\n        name=\"priceFrom\"\n        placeholder=\"Price from...\"\n        onChange={onPriceInputChange}\n        value={props.priceFrom}\n      />\n      <label htmlFor=\"priceTo\">Price To:</label>\n      <input\n        type=\"number\"\n        id=\"priceTo\"\n        name=\"priceTo\"\n        placeholder=\"Price to...\"\n        onChange={onPriceInputChange}\n        value={props.priceTo}\n      />\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\n\nimport \"../styles/Search.css\";\nimport { ToggleColumns } from \"./ToggleColumns\";\nimport { ProductList } from \"./ProductList\";\nimport { FilterForm } from \"./FilterForm\";\nimport products from \"../assets/products.json\";\n\nexport const Search = (props) => {\n  const [price, setPrice] = useState({ priceFrom: 0, priceTo: Infinity });\n\n  const [columns, setColumns] = useState({\n    id: true,\n    name: true,\n    department: true,\n    price: true,\n    currency: true\n  });\n\n  const [displayedProducts, setDisplayedProducts] = useState(props.products);\n\n  const onPriceInputChange = (name, value) => {\n    setPrice((price) => ({ ...price, [name]: value }), filterProducts());\n  };\n\n  const onCheckboxClick = (name, checked) => {\n    setColumns((columns) => ({ ...columns, [name]: checked }));\n  };\n\n  const filterProducts = () => {\n    setDisplayedProducts(\n      props.products.filter(\n        (product) =>\n          product.price >= price.priceFrom && product.price <= price.priceTo\n      )\n    );\n  };\n\n  return (\n    <div className=\"Products\">\n      <FilterForm\n        priceFrom={price.priceFrom}\n        priceTo={price.priceTo}\n        onPriceInputChange={onPriceInputChange}\n      />\n\n      <ToggleColumns onCheckboxClick={onCheckboxClick} columns={columns} />\n\n      <ProductList products={displayedProducts} columns={columns} />\n    </div>\n  );\n};\n\nexport default Search;\n","import React from 'react'\n\nimport { Search } from './components/Search'\nimport products from './assets/products.json';\n\nconst App = () => {\n  return <Search products={products} />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}